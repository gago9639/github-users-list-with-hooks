{"version":3,"sources":["components/Buttons.js","components/User.js","components/UsersList.js","components/SearchBar.js","components/Loading/Loading.js","components/AboutUser/AboutUser.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","style","classList","text","action","type","className","title","onClick","User","useState","isEditorOpen","setIsEditorOpen","login","setLogin","nodeId","setNodeId","href","profileUrl","target","rel","src","avatarUrl","alt","InfoEditor","onLoginChange","value","onNodeIdChange","InfoDisplay","onSave","onSeeMore","onDelete","useEffect","onChange","event","UsersList","users","map","user","key","id","avatar_url","html_url","node_id","find","_user","SearchBar","aria-hidden","placeholder","aria-label","onSearch","Loading","AboutUser","isLoading","data","setData","window","client","getUserProfile","res","AboutUserContent","onBack","name","location","followers","following","public_repos","public_gists","updated_at","slice","AppContent","aboutUserPage","isOpen","onCloseAboutUserPage","App","setAboutUserPage","filteredData","setFilteredData","getUsers","filter","includes","NodeId","index","setUser","newData","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c101c028.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function Button (props) {\r\n    let style = {classList: '', text: ''}\r\n    switch (props.action) {\r\n        case 'SEE_MORE' :\r\n            style = {classList: 'btn-success', text: 'See moore'};\r\n            break;\r\n\r\n        case 'DELETE' :\r\n            style = {classList: 'btn-danger', text: 'Delete'};\r\n            break;\r\n\r\n        case 'EDIT' :\r\n            style = {classList: 'btn-warning', text: 'Edit'};\r\n            break;\r\n\r\n        case 'CANCEL' :\r\n            style = {classList: 'btn-dark', text: 'Cancel'};\r\n            break;\r\n\r\n        case 'SAVE' :\r\n            style = {classList: 'btn-success', text: 'Save'};\r\n            break;\r\n    }\r\n\r\n    return <button\r\n                type=\"button\"\r\n                className={`btn btn-action btn-success ${style.classList}`} \r\n                title={style.text} \r\n                onClick={props.onClick}>\r\n            {style.text}</button>;\r\n}","import React, { useState, useEffect } from 'react';\r\nimport Button from './Buttons.js';\r\n\r\nexport default function User(props) {\r\n    const [ isEditorOpen, setIsEditorOpen ] = useState(false);\r\n    const [ login, setLogin ] = useState(props.login);\r\n    const [ nodeId, setNodeId ] = useState(props.nodeId); \r\n\r\n    function handleOnLoginChange(value) {\r\n        setLogin(value);\r\n    }\r\n\r\n    function handleOnNodeIdChange(value) {\r\n        setNodeId(value);\r\n    }\r\n\r\n    function handleOnCancel() {\r\n        setIsEditorOpen(false);\r\n        setLogin(props.login);\r\n        setNodeId(props.nodeId);\r\n    }\r\n    \r\n    return(\r\n            <div className=\"card mb-3\">\r\n                <div className=\"row no-gutters\">\r\n                    <div className=\"col-md-4\">\r\n                        <a href={props.profileUrl} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                            <img src={props.avatarUrl} className=\"card-img\" alt=\"user avatar\"></img>\r\n                        </a>\r\n                    </div>\r\n                    <div className=\"col-md-8\">\r\n                        <div className=\"row-75 card-body\">\r\n                            {!isEditorOpen\r\n                            ?<InfoDisplay\r\n                                profileUrl = {props.profileUrl}\r\n                                login = {props.login}\r\n                                nodeId = {props.nodeId}\r\n                                />                \r\n                            :<InfoEditor\r\n                                login = {props.login}\r\n                                nodeId = {props.nodeId}\r\n                                onLoginChange = {handleOnLoginChange}\r\n                                onNodeIdChange = {handleOnNodeIdChange}\r\n                            />}                            \r\n                        </div>\r\n                        <div className=\"row-25 button-bar\">          \r\n                            {!isEditorOpen\r\n                            ?<>\r\n                                <Button\r\n                                    action = \"SEE_MORE\"\r\n                                    onClick = {props.onSeeMore}\r\n                                />\r\n                                <Button \r\n                                    action = \"EDIT\"\r\n                                    onClick = {() => { setIsEditorOpen(true); }}\r\n                                />\r\n                                <Button\r\n                                    action = \"DELETE\"\r\n                                    onClick = {props.onDelete}\r\n                                />\r\n                            </>\r\n                            :<>\r\n                                <Button \r\n                                    action = \"CANCEL\"\r\n                                    onClick = {() => { handleOnCancel(); }}\r\n                                />\r\n                                <Button \r\n                                    action = \"SAVE\"\r\n                                    onClick = {() => {\r\n                                        setIsEditorOpen(false);\r\n                                        props.onSave(login, nodeId)\r\n                                    }}\r\n                                />\r\n                            </>}\r\n                        </div>                        \r\n                    </div>    \r\n                </div>\r\n            </div>\r\n        );    \r\n}\r\n\r\nfunction InfoEditor(props) {\r\n    const[ login, setLogin ] = useState('');\r\n    const[ nodeId, setNodeId ] = useState('');\r\n\r\n    useEffect(() => {\r\n        setLogin(props.login);\r\n        setNodeId(props.nodeId);\r\n    }, [])\r\n\r\n    function handleLoginChange(event) {\r\n        setLogin(event.target.value);\r\n        props.onLoginChange(event.target.value);\r\n    }\r\n\r\n    function handleNodeIdChange(event) {\r\n        setNodeId(event.target.value);\r\n        props.onNodeIdChange(event.target.value);\r\n    }\r\n\r\n    return(\r\n        <div className='user-info-display'>\r\n            <a href={props.profileUrl} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                <h5 className=\"card-title\">Login:<span> </span>\r\n                    <input type=\"text\" onChange={handleLoginChange} value={login}></input>\r\n                </h5>                    \r\n            </a>   \r\n            <span className=\"text-muted\">Node Id:<span> </span>\r\n                <input type=\"text\" onChange={handleNodeIdChange} value={nodeId}></input>\r\n            </span>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction InfoDisplay(props) {\r\n    return(\r\n        <div className='user-info-display'>\r\n            <a className=\"text-body\" href={props.profileUrl} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                <h5 className=\"card-title\">Login: {props.login}</h5>\r\n            </a>   \r\n            <span className=\"text-muted\">Node Id: {props.nodeId}</span>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport User from './User.js'\r\n\r\nfunction UsersList(props) {\r\n    return (\r\n        <div className=\"User-list app-body bg-light\">\r\n            {props.users.map((user) => \r\n                <User \r\n                    key = {user.id} \r\n                    avatarUrl = {user.avatar_url}\r\n                    profileUrl = {user.html_url}\r\n                    login = {user.login}\r\n                    nodeId = {user.node_id}\r\n                    onSeeMore = {() => {\r\n                        props.onSeeMore(props.users.find((_user) => _user.id === user.id).login);\r\n                    }}\r\n                    onSave = {(login, nodeId) => {\r\n                        props.onSave(login, nodeId, user.id);\r\n                    }}\r\n                    onDelete = {() => {\r\n                        props.onDelete(user.id);\r\n                    }}\r\n                />)}\r\n        </div>        \r\n    );\r\n}\r\n\r\nexport default UsersList","import React from 'react';\r\n\r\nexport default function SearchBar(props) {\r\n    return(\r\n        <div className=\"Searchbar bg-light fixed-top app-header\">\r\n            <div className=\"input-group md-form form-sm form-1 pl-0 search-box\">\r\n                <div className=\"input-group-prepend\">\r\n                    <span className=\"input-group-text bg-info\" id=\"basic-text1\"><i className=\"fas fa-search text-white\"\r\n                        aria-hidden=\"true\"></i></span>\r\n                </div>\r\n                <input className=\"form-control my-0 search-input\" type=\"text\" placeholder=\"Search login\"\r\n                 aria-label=\"Search login\" onChange={(event) => {props.onSearch(event.target.value)}}></input>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from 'react'\r\nimport './Loading.css'\r\n\r\nexport default function Loading() {\r\n    return <div className=\"lds-ellipsis\"><div></div><div></div><div></div><div></div></div>\r\n}","import React, { useState, useEffect } from 'react';\r\nimport './AboutUser.css'\r\nimport Loading from '../Loading/Loading.js';\r\n\r\nexport default function AboutUser(props) {\r\n    const[data, setData] = useState({isLoading: true, user: null});\r\n\r\n    useEffect(() => {\r\n       window.client.getUserProfile(props.login, (res) => {setData({isLoading: false, user: res})});\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"About-user\">\r\n            <AboutUserContent\r\n                user = {data.user}\r\n                isLoading = {data.isLoading}\r\n                onBack = {props.onBack}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction AboutUserContent(props) {\r\n    const user = props.user;\r\n    \r\n    return (\r\n        <>\r\n            <div className=\"app-header\">\r\n                <i className=\"fas fa-arrow-left back-button\" onClick={props.onBack}></i>\r\n                <div className=\"about-user-header-cap\">About User</div>\r\n            </div>\r\n                {props.isLoading\r\n                ? <Loading/>\r\n                : <div className=\"app-body about-user-body\">\r\n                    <div className=\"main-info row-container\">\r\n                        <span className=\"user-name-location\">{user.name ?? 'none'} | {user.location ?? 'none'}</span>\r\n                        <img className=\"user-image\" src={user.avatar_url} alt=\"user_avatar\"></img>\r\n                    </div>\r\n                    <div className=\"more-info \">\r\n                        <div className=\"followers-repos row-container\">\r\n                            <span className=\"more-info-text\">Followers: {user.followers} </span>\r\n                            <span className=\"more-info-text\">Following: {user.following}</span>\r\n                            <span className=\"more-info-text\">Public repos: {user.public_repos}</span>\r\n                            <span className=\"more-info-text\">Public gists: {user.public_gists}</span>\r\n                            <span className=\"more-info-text\">Last update: {user.updated_at.slice(0, 10)}</span>\r\n                        </div>\r\n                    </div>\r\n                </div>}            \r\n        </>);\r\n}","import React, { useState, useEffect } from 'react';\nimport UsersList from './components/UsersList.js';\nimport SearchBar from './components/SearchBar.js';\nimport AboutUser from './components/AboutUser/AboutUser.js';\nimport Loading from './components/Loading/Loading.js';\n\nfunction App() {\n    const [aboutUserPage, setAboutUserPage] = useState({isOpen: false, login: null})\n    const [data, setData] = useState({isLoading: true, users: []});\n    const [filteredData, setFilteredData] = useState({users: []});\n\n     useEffect(() => {\n        window.client.getUsers((res) => {\n            setData({isLoading: false, users: []});\n            setFilteredData({users: res});\n        });\n    }, []);\n\n    function handleSearch(text) {\n        setFilteredData({users: data.users.filter((user) => ('' === text) ?  true : user.login.includes(text))});\n    }\n\n    function handleSeeMore(login) {\n        setAboutUserPage({isOpen: true, login})\n    }\n    function handleSave(login, NodeId, index) {\n        setData({isLoading: false, users: data.users.map(setUser)});\n        setFilteredData({users: filteredData.users.map(setUser)});\n\n        function setUser(user) {\n            if(user.id === index) {\n                user.login = login;\n                user.node_id = NodeId;\n\n                return user;\n            }\n\n            return user;\n        }\n    }\n\n    function handleDelete(index) {\n        const newData = {users: filteredData.users.filter((user) => user.id !== index)};\n\n        setData({isLoading: false, users: newData.users});\n        setFilteredData(newData);\n    }\n\n    return (<>\n        {data.isLoading\n        ?<Loading/>\n        :<AppContent\n            onSearch = {handleSearch}\n            users = {filteredData.users}\n            onSeeMore = {handleSeeMore}\n            onSave = {handleSave}\n            onDelete = {handleDelete}\n            aboutUserPage = {aboutUserPage}\n            onCloseAboutUserPage = {() => {setAboutUserPage({isOpen: false, login: null})}}\n        />}\n    </>);\n}\n\nfunction AppContent(props) {\n    return (\n        <div className=\"App\">\n            {!props.aboutUserPage.isOpen\n            ? <>\n                <SearchBar\n                    onSearch = {props.onSearch}\n                />\n                <UsersList\n                    users = {props.users}\n                    onSeeMore = {props.onSeeMore}\n                    onSave = {props.onSave}\n                    onDelete = {props.onDelete}\n                />\n            </>\n            : <>\n                <AboutUser\n                    login = {props.aboutUserPage.login}\n                    onBack = {props.onCloseAboutUserPage}\n                />\n            </>}\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}